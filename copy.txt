import React, { useState, useEffect } from 'react';
import { StyleSheet, FlatList, View, Text } from 'react-native';
import axios from 'axios';
import  PullToRefresh  from 'react-native-pull-to-refresh';

interface ApiError {
  message: string;
}

interface Book {
  id: number;
  name: string;
  isbn: string; // Make isbn optional (if not guaranteed in the API response)
  description?: string; // Make description optional
  price: string;
  category?: string; // Make category optional
}

function BooksList() {
  const [books, setBooks] = useState<Book[]>([]);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const accessToken = '6wQeJMfRojm6XPSx6wXfdTeBDSMoURqOjJFbk3DfxR1zC2PBq9LhLaRGXH0HQdUb';

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get('https://test-api.dev.eura7.com/api/get-all-books', {
          headers: {
            'accept': 'application/ld+json',
            'Authorization': `Bearer ${accessToken}`,
          },
        });

        if (response.data.status === 'success') {
          // Handle potential API response format variations
          const apiBooks: Book[] = response.data.books instanceof Array
            ? response.data.books
            : []; // If "books" is not an array, set an empty array
          setBooks(apiBooks);
        } else {
          setError('API error: ' + response.data.message || 'Unknown error'); // Provide more specific error message if available
        }
      } catch (error: unknown) {
        const typedError: ApiError = { message: 'An unknown error occurred' };
        setError(typedError.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  // Display appropriate messages or render the list based on state
  return (
    <PullToRefresh
      onRefresh={() => {
        setIsLoading(true);
        fetchData().then(() => setIsLoading(false));
      }}
      refreshing={isLoading}
    >
      <View style={{ flex: 1 }}>
        {error && <Text>Error: {error}</Text>}
        {isLoading && <Text>Ładowanie książek...</Text>}
        {!error && !isLoading && books.length === 0 && (
          <Text>Brak książek w bazie danych</Text>
        )}
        {!error && !isLoading && books.length > 0 && (
          <View style={{ padding: 20 }}>
            <View style={styles.container}>
              <Text style={styles.boldItem}>ID Book</Text>
              <Text style={styles.boldItem}>Name</Text>
              <Text style={styles.boldItem}>Price</Text>
            </View>
            <FlatList
              data={books}
              keyExtractor={(item) => item.id.toString()}
              renderItem={({ item }) => (
                <View style={styles.container}>
                  <Text style={styles.item}>{item.id}</Text>
                  <Text style={styles.item}>{item.name}</Text>
                  <Text style={styles.item}>{item.price}</Text>
                </View>
              )} />
          </View>
        )}
      </View>
    </PullToRefresh>
  );
}

export default BooksList;

const styles = StyleSheet.create({
  item: {
    alignContent: 'center'
  },
  boldItem: {
    fontWeight: 'bold'
  },
  container: {
    flexDirection: 'row',
    padding: 30, 
    borderBottomWidth: 1, 
    borderColor: '#ccc', 
    justifyContent: 'space-between'
  }
});